function [isST,isSTsep,modelS,modelT]=isspacetime(model);% isspacetime               - syntaxical analysis of the string 'model' (Jan 1,2001)%% Syntaxical detection of a space-time covariance/variogram% model inside the character string named model.%% A separable covariance model is coded as 'covmodelS/covmodelT',% where covmodelS refers to the spatial covariance function and% covmodelT refers to the temporal covariance function.% A non-separable covariance model is coded as 'covmodelST'.%% SYNTAX :%% [isST,isSTsep,modelS,modelT]=isspacetime(model);%% INPUT :%% model     string   that contains the name of the covariance/%                    variogram model.%% OUTPUT :%% isST      scalar   equal to 1 for a space-time model and equal%                    to 0 otherwise.% isSTsep   scalar   equal to 1 for a space-time separable model%                    and equal to 0 otherwise.% modelS    string   that contains the name of the spatial covariance%                    model if the space-time model is separable, or%                    is empty otherwise% modelT    string   that contains the name of the temporal covariance%                    model if the space-time model is separable, or%                    is empty otherwise.%% NOTE :%% If model is a cell array and the space-time model is separable,% modelS and modelT are cell arrays having the same dimension as model.modelS=[];modelT=[];onemodel=0;if ~iscell(model),  model={model};  onemodel=1;end;nc=length(model);isST=zeros(nc,1);isSTsep=zeros(nc,1);for i=1:nc,  findslash=findstr(model{i},'/');  if ~isempty(findslash),    isST(i)=1;    isSTsep(i)=1;    modelS{i}=model{i}(1:findslash-1);    modelT{i}=model{i}(findslash+1:length(model{i}));  end;  findST=findstr(model{i},'ST');  if ~isempty(findST),    isST(i)=1;  end;end;if isST(1)==0,  if (all(~isST)~=1),    error('All models must be jointly either space, time or space-time');  end;else  if (all(isST)~=1),    error('All models must be jointly either space, time or space-time');  end;end;if isSTsep(1)==0,  if (all(~isSTsep)~=1),    error('All space-time models must be jointly either separable or non-separable');  end;else  if (all(isSTsep)~=1),    error('All space-time models must be jointly either separable or non-separable');  end;end;isST=isST(1);isSTsep=isSTsep(1);if onemodel==1,  if isSTsep==1,    modelS=modelS{1};    modelT=modelT{1};  end;end;